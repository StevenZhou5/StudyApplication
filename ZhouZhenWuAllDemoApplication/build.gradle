// Top-level build file where you can add configuration options common to all sub-projects/modules.
// 可以参考https://mp.weixin.qq.com/s/1UHcYOudViMhpUYeREZzGA
apply from: 'version.gradle'

//Gradle-Step3:project的build.gradle文件执行
/*
1.buildscript
buildscript中的声明是gradle脚本自身需要使用的资源。可以声明的资源包括依赖项、第三方插件、maven仓库地址等

2.ext
ext是自定义属性，现在很多人都喜欢把所有关于版本的信息都利用ext放在另一个自己新建的gradle文件中集中管理.
*/

buildscript {
    // repositories顾名思义就是仓库的意思啦，而jcenter()、maven()和google()就是托管第三方插件的平台
    repositories {
        jcenter()
        google()
    }

    // dependencies里面用来配置依赖的插件
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'

        // google AutoValue
//        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
//        compile gradleApi()
//        compile localGroovy()

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
//    allprojects块的repositories用于多项目构建，为所有项目提供共同所需依赖包。而子项目可以配置自己的repositories以获取自己独需的依赖包
    repositories {
        jcenter()
        flatDir {
            dirs 'aars'
        }
        google()
    }
}
/* buildscript和allprojects的作用和区别
 *
 * buildscript中的声明是gradle脚本自身需要使用的资源，就是说他是管家自己需要的资源，跟你这个大少爷其实并没有什么关系。
 * 而allprojects声明的却是你所有module所需要使用的资源，就是说如果大少爷你的每个module都需要用同一个第三库的时候，
 * 你可以在allprojects里面声明。
 * 这下解释应该可以明白了吧
 */

/* 运行gradle clean时，执行此处定义的task。该任务继承自Delete，删除根目录中的build目录。
 * 相当于执行Delete.delete(rootProject.buildDir)。
 * 其实这个任务的执行就是可以删除生成的Build文件的，跟Android Studio的clean是一个道理
 * */
task clean(type: Delete) {
    delete rootProject.buildDir
}

//在这里定义了全局的一些构建属性
ext {
    compileSdkVersion = 26
    buildToolsVersion = "26.0.2"
    minSdkVersion = 16
    unTargetSdkVersion = 26
    miuiTargetSdkVersion = 26
    javaVersion = JavaVersion.VERSION_1_7
}



